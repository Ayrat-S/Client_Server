Conspect_Client_Server_Architecture
Group_28

Двух уровневая
Трех уровневая
Многоуровненвая

Толстый клиент
Тонкий клиент

Теплый клиент (сохранены cookies)
Холодный клиент (первая регистрация)

Клиент-серверная архитектура работает через API

***********
Что такое HTTP?
HTTP (англ. HyperText Transfer Protocol — «протокол передачи гипертекста»)
HTTP — протокол прикладного уровня передачи данных, изначально — в виде гипертекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных.
***
Клиент -> HTTP-запрос -> Сервер
Сервер -> HTTP-ответ  -> Клиент
***
Гиперте́кст — термин, обозначающий систему из текстовых страниц, имеющих перекрёстные ссылки. составленные как по вертикали, так и по горизонтали. Примерами гипертекста являются энциклопедии, компьютерные сети, веб-сайты, в которых можно переходить с одной страницы на другую и выполнять поиск по ключевым словам.
***
Остановился на 13:25

Холодильник может быть как клиентом так и сервером.
Главное условие - это чтобы в нем было компьютерное железо, в котором есть возможность установки программ и обмен данными.

19:45 HTTP client
Клиентом может быть абсолютная железяка и не обязатльно ставить специализированный софт клиента.

HTTP server - работает по http запросам.
HTTP client - это тоже какой-то софт, который спрашивает что-то по законам http (протоколу).
На примере браузера:
Вводите ссылку - браузер по http протоколу (правилу) передает запрос на сервак.
HTTP client - это "не важно что" спросившее на серваке информацию по http протоколу. Это может быть какая-то одна строчка кода запущенная в терминале спросившая что-то на серваке.

РИСУНКИ

(Client: браузер) <===> (API)<=>(Сервер: HTTP-server)

GET (URL)
В браузере (клиенте) вводим https://name.com
Браузер методом GET отправляет запрос в интернет на DNS сервера которые пробегут по пути https:// , найдут name.com , найдут железо по ip в интернете где крутится этот сайт => это будет http запрос.

name.com - это человеко-понятное название железа сети. Под капотом железяка-сервер называться будет например 190.23.47.215 (ip железяки сервера глобальной сети интернет - адрес) 

Допустим мы вводим:
https://name.com/login
Это будет endpoint, т.е. на серваке name.com запущен такой сервер, который не просто страничку возвращает, а у него есть своя API (application programm interface), т.е. на сервере поднято API.
Это такая прослоечка которая помогает клиенту общаться с серваком.
Что значит общаться - API это набор комманд в который если постучаться можно получить ответ от сервера. 
Что значит набор комманд - например /login это команда, т.е endpoint.
Набор этих комманд это endpoint (точка касания к серверу).
Если команду ввести с ошибкой или не существующую - сервер вернет ответ в виде статус кода (ошибки) 404 Not Found.

Статус код (ошибка) 404 Not Found - это протокол HTTP, правило взаимодействия клиентов и серверов внутри сети.

Программист может создать свои статус коды, методы.

Backend - server
Frontend - client

Программисты фронтэнда и бэкенда всегда договариваются, какие эндпоинты, что должно прилетать, каким методом, и что на эти запросы должно быть отвечено сервером - чтобы все работало как часы.

В данном случае https://name.com/login есть эндпоинт /login
33:57

На сервере бэкэнд программист написал что если эндепоинт /login значи надо вернуть форму логина, т.е на клиент возвращается форма где пользователь сможет залогиниться.

В этом случае бэкэнд программист попросит фронтэнд программиста написать html css js код формы логина, после чего бэкэнд программист сможет взять с сервера, запаковать и отправить форму клиенту.

Если в запросе (request) у клиента, еще нет на сервере того, что фронтэнды не написали, то бэкэнд отправит ответ 404.

Бэкэнд отвечает за принять запрос и отправить (response) готовую форму, т.е. 
Фронтэнд отвечает за код готовой формы (предоставление файлов бэкэнду с кодами).

PARSING
В ответе запакованный по HTTP протоколу летят файлы html css js.
Ваш браузер получает эти файлы и парсит (получает код, текст html css js, написанный по определенному формату).

HTML - это скелет.
Например, браузер получив html текст, знает, что надо где-то поставить какую-то картинку, кнопку, текст и т.д..

CSS - это мясо.
Например, браузер получив css (каскадная таблица стилей) текст, знает, что тут будет кнопка красная, картинка будет шириной в 400 пикселей и высотой в 200 и стоять чуть левее текста а текст с жирным шрифтом должен стоять с картинкой.

JS - это мозги.
Например, браузер получив js текст, знает, что при наведении курсора на картинку сама картинка немного увеличится. Нажал кнопку - отправился запрос на бэкэнд.

EVENTS - события.
Когда водим мышкой в браузере и кликаем, происходит событие. Фронтэнды программируют эти события. Допустим кликнули мышкой в поле логин - это событие. Даже если навели мышку на поле пароль без клика - это тоже событие. Т.е. даже движение мышкой вправо влево на один пиксель - это тоже событие.

ON HOVER
При наведении мышкой на кнопку, она может поменять цвет - это состояние on hover. Но если нажать на кнопку - это уже событие.

POST (URL)
Например, программисты написали скрипт, где при нажатии на кнопку логин, скрипт соберет все данные с полей данных логин и пароль, запакует текст в формате json, и, скрипт отправит запрос методом POST (в котором в BODY запроса запакованы логин и пароль) на сервер по определенному URL - например http://name.com/userlogin
Сервер, принимая этот запрос, начинает процедуру идентификации.
Когда прилетает запрос на endpoint /userlogin, бэкэнды уже написали код который действует по определенному алгоритму.
Что это значит?
!!! По эндпоинту /userlogin ожидается метод POST.
Если по эндпоинту /userlogin прилетит метод GET, то сервер вернет статус код 405 Not Allowed - метод не поддерживается. !!!

SQL запрос
Далее, сервер берет BODY нашего REQUEST, ищет там логин и пароль, с логином идет в базу данных (БД), SQL запросом запрашивает у базы, есть ли пользователь указанный в BODY?
Если такой логин есть в БД (уже зарегистрирован), БД отвечает что есть - произошла ИДЕНТИФИКАЦИЯ ПОЛЬЗОВАТЕЛЯ.
Сервер дальше запрашивает SQL запросом у БД соответствие пароля в BODY с сохраненным когда-то паролем в БД - произошла АУТЕНТИФИКАЦИЯ по паролю.











































